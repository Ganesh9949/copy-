//fibinocci even numbers
public class EvenFibonacciSeries {                                                                                              

    public static void main(String[] args) {
        int limit = 10; // Change this to the desired limit
        printEvenFibonacci(limit);
    }

    public static void printEvenFibonacci(int limit) {
        int a = 0, b = 1, c;

        System.out.println("Even Fibonacci numbers up to " + limit + ":");
        
        while (a <= limit) {
            if (a % 2 == 0) {
                System.out.print(a + " ");
            }
            
            c = a + b;
            a = b;
            b = c;
        }
    }
}
//matrix addition
public class MatrixAddition {

    public static void main(String[] args) {
        int[][] matrix1 = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        int[][] matrix2 = {
            {9, 8, 7},
            {6, 5, 4},
            {3, 2, 1}
        };

        int[][] result = addMatrices(matrix1, matrix2);

        // Displaying the result
        System.out.println("Matrix 1:");
        printMatrix(matrix1);

        System.out.println("\nMatrix 2:");
        printMatrix(matrix2);

        System.out.println("\nMatrix Sum:");
        printMatrix(result);
    }

    public static int[][] addMatrices(int[][] matrix1, int[][] matrix2) {
        int rows = matrix1.length;
        int columns = matrix1[0].length;

        int[][] result = new int[rows][columns];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result[i][j] = matrix1[i][j] + matrix2[i][j];
            }
        }

        return result;
    }

    public static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int value : row) {
                System.out.print(value + " ");
            }
            System.out.println();
        }
    }
}
//sorting alphabets
import java.util.Arrays;

public class AlphabetSort {

    public static void main(String[] args) {
        char[] alphabet = {'c', 'a', 'b', 'z', 'f', 'g'};

        // Sorting in ascending order
        System.out.println("Alphabets in ascending order:");
        sortAndPrint(alphabet, true);

        // Sorting in descending order
        System.out.println("\nAlphabets in descending order:");
        sortAndPrint(alphabet, false);
    }

    public static void sortAndPrint(char[] arr, boolean ascending) {
        if (ascending) {
            Arrays.sort(arr);
        } else {
            // To sort in descending order, we first sort in ascending order and then reverse the array
            Arrays.sort(arr);
            reverseArray(arr);
        }

        // Print the sorted array
        for (char value : arr) {
            System.out.print(value + " ");
        }
        System.out.println();
    }

    public static void reverseArray(char[] arr) {
        int start = 0;
        int end = arr.length - 1;

        while (start < end) {
            // Swap elements at start and end indices
            char temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;

            // Move indices toward the center
            start++;
            end--;
        }
    }
}
//matrix multiplication
public class MatrixMultiplication {

    public static void main(String[] args) {
        int[][] matrix1 = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        int[][] matrix2 = {
            {9, 8, 7},
            {6, 5, 4},
            {3, 2, 1}
        };

        int[][] result = multiplyMatrices(matrix1, matrix2);

        // Displaying the result
        System.out.println("Matrix 1:");
        printMatrix(matrix1);

        System.out.println("\nMatrix 2:");
        printMatrix(matrix2);

        System.out.println("\nMatrix Multiplication Result:");
        printMatrix(result);
    }

    public static int[][] multiplyMatrices(int[][] matrix1, int[][] matrix2) {
        int rows1 = matrix1.length;
        int columns1 = matrix1[0].length;
        int rows2 = matrix2.length;
        int columns2 = matrix2[0].length;

        if (columns1 != rows2) {
            throw new IllegalArgumentException("Matrix dimensions are not suitable for multiplication.");
        }

        int[][] result = new int[rows1][columns2];

        for (int i = 0; i < rows1; i++) {
            for (int j = 0; j < columns2; j++) {
                for (int k = 0; k < rows2; k++) {
                    result[i][j] += matrix1[i][k] * matrix2[k][j];
                }
            }
        }

        return result;
    }

    public static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int value : row) {
                System.out.print(value + " ");
            }
            System.out.println();
        }
    }
}
//print special charecters seperately
public class SpecialCharacterPrinter {

    public static void main(String[] args) {
        String inputString = "Hello! This is a special character test: @#$%^&*()";

        System.out.println("Special characters in the string:");
        printSpecialCharacters(inputString);
    }

    public static void printSpecialCharacters(String input) {
        for (int i = 0; i < input.length(); i++) {
            char currentChar = input.charAt(i);

            // Check if the character is a special character
            if (isSpecialCharacter(currentChar)) {
                System.out.print(currentChar + " ");
            }
        }
        System.out.println();
    }

    public static boolean isSpecialCharacter(char ch) {
        // You can customize this condition based on your definition of special characters
        return !Character.isLetterOrDigit(ch) && !Character.isWhitespace(ch);
    }
}
//no of factors
import java.util.Scanner;

public class NumberOfFactors {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a positive integer: ");
        int number = scanner.nextInt();

        if (number < 1) {
            System.out.println("Please enter a positive integer.");
        } else {
            int factors = countFactors(number);
            System.out.println("Number of factors for " + number + ": " + factors);
        }

        scanner.close();
    }

    public static int countFactors(int n) {
        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (n % i == 0) {
                count++;
            }
        }
        return count;
    }
}
//perfect number or not
import java.util.Scanner;

public class PerfectNumberChecker {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a positive integer: ");
        int number = scanner.nextInt();

        if (number < 1) {
            System.out.println("Please enter a positive integer.");
        } else {
            boolean isPerfect = isPerfectNumber(number);

            if (isPerfect) {
                System.out.println(number + " is a perfect number.");
            } else {
                System.out.println(number + " is not a perfect number.");
            }
        }

        scanner.close();
    }

    public static boolean isPerfectNumber(int n) {
        if (n <= 1) {
            return false;
        }

        int sum = 1; // Start with 1 because every number is divisible by 1

        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                sum += i;
                if (i != n / i) {
                    sum += n / i;
                }
            }
        }

        return sum == n;
    }
}
//armstrong number or not
import java.util.Scanner;

public class ArmstrongNumberChecker {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a positive integer: ");
        int number = scanner.nextInt();

        if (number < 1) {
            System.out.println("Please enter a positive integer.");
        } else {
            boolean isArmstrong = isArmstrongNumber(number);

            if (isArmstrong) {
                System.out.println(number + " is an Armstrong number.");
            } else {
                System.out.println(number + " is not an Armstrong number.");
            }
        }

        scanner.close();
    }

    public static boolean isArmstrongNumber(int n) {
        int originalNumber = n;
        int numDigits = countDigits(n);
        int sum = 0;

        while (n > 0) {
            int digit = n % 10;
            sum += Math.pow(digit, numDigits);
            n /= 10;
        }

        return sum == originalNumber;
    }

    public static int countDigits(int n) {
        int count = 0;
        while (n > 0) {
            n /= 10;
            count++;
        }
        return count;
    }
}
//prime and composite
import java.util.Scanner;

public class PrimeAndCompositeNumbers {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the lower limit of the range: ");
        int lowerLimit = scanner.nextInt();

        System.out.print("Enter the upper limit of the range: ");
        int upperLimit = scanner.nextInt();

        System.out.println("Prime numbers in the range:");
        printPrimeNumbers(lowerLimit, upperLimit);

        System.out.println("\nComposite numbers in the range:");
        printCompositeNumbers(lowerLimit, upperLimit);

        scanner.close();
    }

    public static void printPrimeNumbers(int lowerLimit, int upperLimit) {
        for (int i = lowerLimit; i <= upperLimit; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    public static void printCompositeNumbers(int lowerLimit, int upperLimit) {
        for (int i = lowerLimit; i <= upperLimit; i++) {
            if (!isPrime(i)) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    public static boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }

        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }

        return true;
    }
}
//nth largest element in an array
import java.util.Arrays;
import java.util.Scanner;

public class NthLargestElement {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        int[] array = new int[size];

        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextInt();
        }

        System.out.print("Enter the value of N (for the Nth largest element): ");
        int nth = scanner.nextInt();

        int nthLargest = findNthLargest(array, nth);

        if (nthLargest != Integer.MIN_VALUE) {
            System.out.println("The " + nth + "th largest element is: " + nthLargest);
        } else {
            System.out.println("Invalid input. Please make sure N is within the array size.");
        }

        scanner.close();
    }

    public static int findNthLargest(int[] array, int nth) {
        if (nth <= 0 || nth > array.length) {
            return Integer.MIN_VALUE; // Invalid input
        }

        Arrays.sort(array); // Sort the array in ascending order

        return array[array.length - nth];
    }
}
//unique permutations
import java.util.Arrays;

public class UniquePermutations {

    public static void main(String[] args) {
        int[] array = {1, 2, 3};
        System.out.println("Unique permutations:");
        printUniquePermutations(array, 0);
    }

    public static void printUniquePermutations(int[] array, int startIndex) {
        if (startIndex == array.length - 1) {
            System.out.println(Arrays.toString(array));
            return;
        }

        for (int i = startIndex; i < array.length; i++) {
            // Swap the current element with the element at startIndex
            swap(array, i, startIndex);

            // Recursively generate permutations for the remaining elements
            printUniquePermutations(Arrays.copyOf(array, array.length), startIndex + 1);

            // Swap back to restore the original order for the next iteration
            swap(array, i, startIndex);
        }
    }

    public static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}
//constructor bank and deposit
import java.util.Arrays;

public class UniquePermutations {

    public static void main(String[] args) {
        int[] array = {1, 2, 3};
        System.out.println("Unique permutations:");
        printUniquePermutations(array, 0);
    }

    public static void printUniquePermutations(int[] array, int startIndex) {
        if (startIndex == array.length - 1) {
            System.out.println(Arrays.toString(array));
            return;
        }

        for (int i = startIndex; i < array.length; i++) {
            // Swap the current element with the element at startIndex
            swap(array, i, startIndex);

            // Recursively generate permutations for the remaining elements
            printUniquePermutations(Arrays.copyOf(array, array.length), startIndex + 1);

            // Swap back to restore the original order for the next iteration
            swap(array, i, startIndex);
        }
    }

    public static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}
//fizz buzz
import java.util.ArrayList;
import java.util.List;

public class FizzBuzz {

    public static void main(String[] args) {
        int n = 3;
        List<String> result = fizzBuzz(n);

        // Print the result
        System.out.println(result);
    }

    public static List<String> fizzBuzz(int n) {
        List<String> result = new ArrayList<>();

        for (int i = 1; i <= n; i++) {
            if (i % 3 == 0 && i % 5 == 0) {
                result.add("FizzBuzz");
            } else if (i % 3 == 0) {
                result.add("Fizz");
            } else if (i % 5 == 0) {
                result.add("Buzz");
            } else {
                result.add(Integer.toString(i));
            }
        }

        return result;
    }
}
//roman to integer
import java.util.HashMap;
import java.util.Map;

public class RomanToInteger {

    public static void main(String[] args) {
        // Test Cases
        System.out.println(romanToInt("LVIII"));  // Output: 58
        System.out.println(romanToInt("MCMXCI")); // Output: 1991
        System.out.println(romanToInt("V"));      // Output: 5
        System.out.println(romanToInt("LZAII"));  // Output: Invalid Roman numeral
    }

    public static int romanToInt(String s) {
        Map<Character, Integer> romanMap = new HashMap<>();
        romanMap.put('I', 1);
        romanMap.put('V', 5);
        romanMap.put('X', 10);
        romanMap.put('L', 50);
        romanMap.put('C', 100);
        romanMap.put('D', 500);
        romanMap.put('M', 1000);

        int result = 0;

        for (int i = 0; i < s.length(); i++) {
            if (!romanMap.containsKey(s.charAt(i))) {
                System.out.println("Invalid Roman numeral");
                return -1; // Invalid Roman numeral
            }

            if (i < s.length() - 1 && romanMap.get(s.charAt(i)) < romanMap.get(s.charAt(i + 1))) {
                // If the current numeral is smaller than the next numeral, subtract it
                result -= romanMap.get(s.charAt(i));
            } else {
                result += romanMap.get(s.charAt(i));
            }
        }

        return result;
    }
}
//inheritance of students grade
interface Exam {
    double calculatePercentage();
}

interface Sports {
    int getSportsScore();
}

class Student implements Exam, Sports {
    private String name;
    private double examScore;
    private int sportsScore;

    public Student(String name, double examScore, int sportsScore) {
        this.name = name;
        this.examScore = examScore;
        this.sportsScore = sportsScore;
    }

    @Override
    public double calculatePercentage() {
        // Assume a simple calculation for percentage
        return (examScore / 100.0) * 100;
    }

    @Override
    public int getSportsScore() {
        return sportsScore;
    }

    public void displayGrade() {
        double percentage = calculatePercentage();
        int totalScore = getSportsScore();

        // Assume some logic for determining the grade based on percentage and sports score
        if (percentage >= 60 && totalScore >= 50) {
            System.out.println(name + " has passed!");
        } else {
            System.out.println(name + " has not passed.");
        }
    }
}

public class StudentGradeCalculator {

    public static void main(String[] args) {
        Student student = new Student("John", 80, 60);
        student.displayGrade();
    }
}


